// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import Stripe from "stripe";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function $$catch(promise, callback) {
  return promise.catch(function (err) {
              return callback(Caml_js_exceptions.internalToOCamlException(err));
            });
}

var $$Promise = {
  $$catch: $$catch
};

function make(prim) {
  return new Stripe(prim);
}

var Meter = {};

var Price = {};

var Product = {};

function getConfiguredUnitLabel(productConfig) {
  var val = {
    contents: undefined
  };
  productConfig.prices.forEach(function (priceConfig) {
        var match = priceConfig.recurring;
        if (match.TAG !== "Metered") {
          return ;
        }
        var unitLabel = match.unitLabel;
        var anotherUnitLabel = val.contents;
        if (anotherUnitLabel !== undefined) {
          Js_exn.raiseError("The product '" + productConfig.name + "' has two different unit labels: " + anotherUnitLabel + " and " + unitLabel + ". It's allowed to have only one unit label.");
        }
        val.contents = unitLabel;
      });
  return val.contents;
}

async function syncProduct(stripe, productConfig) {
  var configuredUnitLabel = getConfiguredUnitLabel(productConfig);
  console.log("Searching for active product with the name '" + productConfig.name + "'");
  var match = await stripe.products.search({
        query: "active:\'true\' AND name:'" + productConfig.name + "'",
        limit: 2
      });
  var match$1 = match.data;
  var len = match$1.length;
  var product;
  if (len !== 1) {
    if (len !== 0) {
      product = Js_exn.raiseError("There are multiple active products with the name '" + productConfig.name + "'. Please go to dashboard and delete not needed ones (https://dashboard.stripe.com/test/products?active=true)");
    } else {
      console.log("No active product with the name '" + productConfig.name + "' found. Creating a new one");
      var p = await stripe.products.create({
            name: productConfig.name,
            unit_label: configuredUnitLabel
          });
      console.log("Product with the name '" + productConfig.name + "' successfully created. Product ID: " + p.id);
      product = p;
    }
  } else {
    var p$1 = match$1[0];
    console.log("Found an existing product with the name '" + productConfig.name + "'. Product ID: " + p$1.id);
    var fieldsToSync = {};
    var match$2 = p$1.unit_label;
    var exit = 0;
    if (match$2 === null) {
      if (configuredUnitLabel !== undefined) {
        exit = 1;
      }
      
    } else if (!(configuredUnitLabel !== undefined && match$2 === configuredUnitLabel)) {
      exit = 1;
    }
    if (exit === 1) {
      if (configuredUnitLabel !== undefined) {
        fieldsToSync.unit_label = configuredUnitLabel;
      } else {
        fieldsToSync.unit_label = "";
      }
    }
    var fieldNamesToSync = Object.keys(fieldsToSync);
    if (fieldNamesToSync.length > 0) {
      console.log("Syncing product " + p$1.id + " fields " + fieldNamesToSync.join(", "));
      var p$2 = await stripe.products.update(p$1.id, fieldsToSync);
      console.log("Product " + p$2.id + " fields successfully updated");
      product = p$2;
    } else {
      console.log("Product " + p$1.id + " fields are up to date");
      product = p$1;
    }
  }
  console.log(product);
}

function sync(stripe, productCatalog) {
  Promise.all(productCatalog.products.map(function (p) {
            return syncProduct(stripe, p);
          }));
}

var ProductCatalog = {
  getConfiguredUnitLabel: getConfiguredUnitLabel,
  syncProduct: syncProduct,
  sync: sync
};

export {
  $$Promise ,
  make ,
  Meter ,
  Price ,
  Product ,
  ProductCatalog ,
}
/* stripe Not a pure module */
